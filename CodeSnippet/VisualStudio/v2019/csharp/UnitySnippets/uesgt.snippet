<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Eager Singleton</Title>
			<Shortcut>uesgt</Shortcut>
			<Description>Code snippet for a eagerly loaded Singleton</Description>
			<Author>Danny T</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>type</ID>
					<ToolTip>Property type</ToolTip>
					<Default>int</Default>
				</Literal>
			</Declarations>
			<Code Language="csharp">
  			<![CDATA[private static $type$ instance;

			public static $type$ Instance {
				get { 
					Init();
            		return instance; 
				}
				private set { instance = value; }
			}

			[RuntimeInitializeOnLoadMethod]
			private static void Init() {
				// Unity replaces a destroyed game object with a non-null "destroyed" object.
				// Using .Equals checks against that.
				if (instance == null || instance.Equals(null)) {
					GameObject gameObject = new GameObject("Spawned $type$");
					instance = gameObject.AddComponent<$type$>();
					DontDestroyOnLoad(gameObject);
					
					Debug.LogFormat("Spawned new {0} singleton", typeof($type$));
				}
			}$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>